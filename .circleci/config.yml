version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          command: |
            aws cloudformation delete-stack --stack-name my-stack --gerion us-east-1


jobs:
  instance_creation:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: |
            aws cloudformation deploy \
            --stack-name my-stack \
            --template-file instance.yaml \

  configure_instance:
    docker: 
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          ec2: ["1a:2e:1f:f6:4d:41:a3:97:df:dd:4c:6f:cd:f5:2b:40"]
      - run: 
          command: |
            apk add --update ansible
      - run:
          command: |
            apk add --no-cache \
            python3 \
            py3-pip \
            && pip3 install --upgrade pip \
            && pip3 install --no-cache-dir \
            awscli \
            && rm -rf /var/cache/apk/*
      - run:
          command: |
            echo '[web]' > inventory
      - run:
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --region us-east-1 \
            --output text >> inventory
      - run:
          command: more inventory
      - run: 
          command: ls -ltr
      - run:
          command: |
            ansible-playbook playbook.yaml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run: 
          command: |
            url="http://google.com"
            if curl -s ${url}
            then 
              return 0
            else 
              return 1
            fi
      - when:
          condition: on_fail
          steps:
            - destroy_environment

  instance_delete:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: aws cloudformation delete-stack --stack-name my-stack


workflows:
  starting-up-instance:
    jobs:
      - instance_creation
      - configure_instance:
          requires:
            - instance_creation
      - smoke_test:
          requires:
            - instance_creation
            - configure_instance